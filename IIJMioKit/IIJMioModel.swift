// This file was auto-generated by Swift-IDL.

import Foundation
public enum Router: CustomStringConvertible {
    case GetCoupon
    case GetPacket
    case PutCoupon(couponInfo: [MIOCouponSwitchHdoInfo])

    public var method: String {
        switch self {
        case .GetCoupon: return "GET"
        case .GetPacket: return "GET"
        case .PutCoupon: return "PUT"
        }
    }
    public var path: String {
        switch self {
        case .GetCoupon: return "/mobile/d/v1/coupon/"
        case .GetPacket: return "/mobile/d/v1/log/packet/"
        case .PutCoupon: return "/mobile/d/v1/coupon/"
        }
    }
    public var params: [String: AnyObject] {
        switch self {
        case .GetCoupon: return [:]
        case .GetPacket: return [:]
        case .PutCoupon(let (couponInfo)): return ["couponInfo": couponInfo.map { $0.toJSON() }]
        }
    }

    public var description: String {
        switch self {
        case .GetCoupon: return "GetCoupon"
        case .GetPacket: return "GetPacket"
        case .PutCoupon(let v): return "PutCoupon(couponInfo=\(v.0))"
        }
    }
}

public class MIOCouponSwitchHdoInfo: JSONEncodable {
    public let hdoInfo: [MIOCouponUse]

    public init(hdoInfo: [MIOCouponUse] = []) {
        self.hdoInfo = hdoInfo
    }

    public func toJSON() -> [String: AnyObject] {
        return [
            "hdoInfo": hdoInfo.map { $0.toJSON() },
        ]
    }
}

public class MIOCouponUse: JSONEncodable {
    public let hdoServiceCode: String
    public let couponUse: Bool

    public init(hdoServiceCode: String = "", couponUse: Bool = true) {
        self.hdoServiceCode = hdoServiceCode
        self.couponUse = couponUse
    }

    public func toJSON() -> [String: AnyObject] {
        return [
            "hdoServiceCode": hdoServiceCode.toJSON(),
            "couponUse": couponUse.toJSON(),
        ]
    }
}

public enum MIOPlan: String, JSONDecodable, CustomStringConvertible {
    case FamilyShare = "Family Share"
    case MinimumStart = "Minimum Start"
    case LightStart = "Light Start"

    public static func parseJSON(data: AnyObject) throws -> MIOPlan {
        if let v = data as? String, val = MIOPlan(rawValue: v) {
            return val
        }
        throw JSONDecodeError.ValueTranslationFailed(type: "MIOPlan")
    }

    public func toJSON() -> String {
        return rawValue
    }

    public var description: String { return rawValue }
}

public class MIOCouponResponse: JSONDecodable, JSONEncodable, CustomStringConvertible {
    public let returnCode: String
    public let couponInfo: [MIOCouponInfo]?

    public init(returnCode: String, couponInfo: [MIOCouponInfo]? = nil) {
        self.returnCode = returnCode
        self.couponInfo = couponInfo
    }

    public class func parseJSON(data: AnyObject) throws -> MIOCouponResponse {
        let returnCode: String
        if let v: AnyObject = data["returnCode"] {
            if v is NSNull {
                throw JSONDecodeError.NonNullablle(key: "returnCode")
            } else {
                do {
                    returnCode = try String.parseJSON(v)
                } catch JSONDecodeError.ValueTranslationFailed {
                    throw JSONDecodeError.TypeMismatch(key: "returnCode", type: "String")
                }
            }
        } else {
            throw JSONDecodeError.MissingKey(key: "returnCode")
        }
        
        let couponInfo: [MIOCouponInfo]?
        if let v: AnyObject = data["couponInfo"] {
            if v is NSNull {
                couponInfo = nil
            } else {
                do {
                    couponInfo = try MIOCouponInfo.parseJSONArray(v)
                } catch JSONDecodeError.NonNullablle {
                    throw JSONDecodeError.NonNullablle(key: "couponInfo")
                } catch JSONDecodeError.ValueTranslationFailed {
                    throw JSONDecodeError.TypeMismatch(key: "couponInfo", type: "MIOCouponInfo")
                }
            }
        } else {
            couponInfo = nil
        }
        
        return MIOCouponResponse(returnCode: returnCode, couponInfo: couponInfo)
    }

    public func toJSON() -> [String: AnyObject] {
        return [
            "returnCode": returnCode.toJSON(),
            "couponInfo": (couponInfo ?? []).map { $0.toJSON() },
        ]
    }

    public var description: String {
        return "MIOCouponResponse(returnCode=\(returnCode), couponInfo=\(couponInfo))"
    }
}

public class MIOPacketResponse: JSONDecodable, JSONEncodable, CustomStringConvertible {
    public let returnCode: String
    public let packetLogInfo: [MIOPacketLogInfo]?

    public init(returnCode: String, packetLogInfo: [MIOPacketLogInfo]? = nil) {
        self.returnCode = returnCode
        self.packetLogInfo = packetLogInfo
    }

    public class func parseJSON(data: AnyObject) throws -> MIOPacketResponse {
        let returnCode: String
        if let v: AnyObject = data["returnCode"] {
            if v is NSNull {
                throw JSONDecodeError.NonNullablle(key: "returnCode")
            } else {
                do {
                    returnCode = try String.parseJSON(v)
                } catch JSONDecodeError.ValueTranslationFailed {
                    throw JSONDecodeError.TypeMismatch(key: "returnCode", type: "String")
                }
            }
        } else {
            throw JSONDecodeError.MissingKey(key: "returnCode")
        }
        
        let packetLogInfo: [MIOPacketLogInfo]?
        if let v: AnyObject = data["packetLogInfo"] {
            if v is NSNull {
                packetLogInfo = nil
            } else {
                do {
                    packetLogInfo = try MIOPacketLogInfo.parseJSONArray(v)
                } catch JSONDecodeError.NonNullablle {
                    throw JSONDecodeError.NonNullablle(key: "packetLogInfo")
                } catch JSONDecodeError.ValueTranslationFailed {
                    throw JSONDecodeError.TypeMismatch(key: "packetLogInfo", type: "MIOPacketLogInfo")
                }
            }
        } else {
            packetLogInfo = nil
        }
        
        return MIOPacketResponse(returnCode: returnCode, packetLogInfo: packetLogInfo)
    }

    public func toJSON() -> [String: AnyObject] {
        return [
            "returnCode": returnCode.toJSON(),
            "packetLogInfo": (packetLogInfo ?? []).map { $0.toJSON() },
        ]
    }

    public var description: String {
        return "MIOPacketResponse(returnCode=\(returnCode), packetLogInfo=\(packetLogInfo))"
    }
}

public class MIOChangeCouponResponse: JSONDecodable, JSONEncodable, CustomStringConvertible {
    public let returnCode: String

    public init(returnCode: String) {
        self.returnCode = returnCode
    }

    public class func parseJSON(data: AnyObject) throws -> MIOChangeCouponResponse {
        let returnCode: String
        if let v: AnyObject = data["returnCode"] {
            if v is NSNull {
                throw JSONDecodeError.NonNullablle(key: "returnCode")
            } else {
                do {
                    returnCode = try String.parseJSON(v)
                } catch JSONDecodeError.ValueTranslationFailed {
                    throw JSONDecodeError.TypeMismatch(key: "returnCode", type: "String")
                }
            }
        } else {
            throw JSONDecodeError.MissingKey(key: "returnCode")
        }
        
        return MIOChangeCouponResponse(returnCode: returnCode)
    }

    public func toJSON() -> [String: AnyObject] {
        return [
            "returnCode": returnCode.toJSON(),
        ]
    }

    public var description: String {
        return "MIOChangeCouponResponse(returnCode=\(returnCode))"
    }
}

public class MIOCouponInfo: JSONDecodable, JSONEncodable, CustomStringConvertible {
    public let hddServiceCode: String
    public let plan: MIOPlan
    public let hdoInfo: [MIOCouponHdoInfo]
    public let coupon: [MIOCoupon]

    public init(hddServiceCode: String, plan: MIOPlan, hdoInfo: [MIOCouponHdoInfo], coupon: [MIOCoupon]) {
        self.hddServiceCode = hddServiceCode
        self.plan = plan
        self.hdoInfo = hdoInfo
        self.coupon = coupon
    }

    public class func parseJSON(data: AnyObject) throws -> MIOCouponInfo {
        let hddServiceCode: String
        if let v: AnyObject = data["hddServiceCode"] {
            if v is NSNull {
                throw JSONDecodeError.NonNullablle(key: "hddServiceCode")
            } else {
                do {
                    hddServiceCode = try String.parseJSON(v)
                } catch JSONDecodeError.ValueTranslationFailed {
                    throw JSONDecodeError.TypeMismatch(key: "hddServiceCode", type: "String")
                }
            }
        } else {
            throw JSONDecodeError.MissingKey(key: "hddServiceCode")
        }
        
        let plan: MIOPlan
        if let v: AnyObject = data["plan"] {
            if v is NSNull {
                throw JSONDecodeError.NonNullablle(key: "plan")
            } else {
                do {
                    plan = try MIOPlan.parseJSON(v)
                } catch JSONDecodeError.ValueTranslationFailed {
                    throw JSONDecodeError.TypeMismatch(key: "plan", type: "MIOPlan")
                }
            }
        } else {
            throw JSONDecodeError.MissingKey(key: "plan")
        }
        
        let hdoInfo: [MIOCouponHdoInfo]
        if let v: AnyObject = data["hdoInfo"] {
            if v is NSNull {
                throw JSONDecodeError.NonNullablle(key: "hdoInfo")
            } else {
                do {
                    hdoInfo = try MIOCouponHdoInfo.parseJSONArray(v)
                } catch JSONDecodeError.NonNullablle {
                    throw JSONDecodeError.NonNullablle(key: "hdoInfo")
                } catch JSONDecodeError.ValueTranslationFailed {
                    throw JSONDecodeError.TypeMismatch(key: "hdoInfo", type: "MIOCouponHdoInfo")
                }
            }
        } else {
            throw JSONDecodeError.MissingKey(key: "hdoInfo")
        }
        
        let coupon: [MIOCoupon]
        if let v: AnyObject = data["coupon"] {
            if v is NSNull {
                throw JSONDecodeError.NonNullablle(key: "coupon")
            } else {
                do {
                    coupon = try MIOCoupon.parseJSONArray(v)
                } catch JSONDecodeError.NonNullablle {
                    throw JSONDecodeError.NonNullablle(key: "coupon")
                } catch JSONDecodeError.ValueTranslationFailed {
                    throw JSONDecodeError.TypeMismatch(key: "coupon", type: "MIOCoupon")
                }
            }
        } else {
            throw JSONDecodeError.MissingKey(key: "coupon")
        }
        
        return MIOCouponInfo(hddServiceCode: hddServiceCode, plan: plan, hdoInfo: hdoInfo, coupon: coupon)
    }

    public func toJSON() -> [String: AnyObject] {
        return [
            "hddServiceCode": hddServiceCode.toJSON(),
            "plan": plan.toJSON(),
            "hdoInfo": hdoInfo.map { $0.toJSON() },
            "coupon": coupon.map { $0.toJSON() },
        ]
    }

    public var description: String {
        return "MIOCouponInfo(hddServiceCode=\(hddServiceCode), plan=\(plan), hdoInfo=\(hdoInfo), coupon=\(coupon))"
    }
}

public class MIOCouponHdoInfo: JSONDecodable, JSONEncodable, CustomStringConvertible {
    public let hdoServiceCode: String
    public let number: String
    public let iccid: String
    public let regulation: Bool
    public let sms: Bool
    public let voice: Bool
    public var couponUse: Bool
    public let coupon: [MIOCoupon]
    public var packetLog: [MIOPacketLog]

    public init(hdoServiceCode: String, number: String, iccid: String, regulation: Bool, sms: Bool, voice: Bool, couponUse: Bool, coupon: [MIOCoupon], packetLog: [MIOPacketLog] = []) {
        self.hdoServiceCode = hdoServiceCode
        self.number = number
        self.iccid = iccid
        self.regulation = regulation
        self.sms = sms
        self.voice = voice
        self.couponUse = couponUse
        self.coupon = coupon
        self.packetLog = packetLog
    }

    public class func parseJSON(data: AnyObject) throws -> MIOCouponHdoInfo {
        let hdoServiceCode: String
        if let v: AnyObject = data["hdoServiceCode"] {
            if v is NSNull {
                throw JSONDecodeError.NonNullablle(key: "hdoServiceCode")
            } else {
                do {
                    hdoServiceCode = try String.parseJSON(v)
                } catch JSONDecodeError.ValueTranslationFailed {
                    throw JSONDecodeError.TypeMismatch(key: "hdoServiceCode", type: "String")
                }
            }
        } else {
            throw JSONDecodeError.MissingKey(key: "hdoServiceCode")
        }
        
        let number: String
        if let v: AnyObject = data["number"] {
            if v is NSNull {
                throw JSONDecodeError.NonNullablle(key: "number")
            } else {
                do {
                    number = try String.parseJSON(v)
                } catch JSONDecodeError.ValueTranslationFailed {
                    throw JSONDecodeError.TypeMismatch(key: "number", type: "String")
                }
            }
        } else {
            throw JSONDecodeError.MissingKey(key: "number")
        }
        
        let iccid: String
        if let v: AnyObject = data["iccid"] {
            if v is NSNull {
                throw JSONDecodeError.NonNullablle(key: "iccid")
            } else {
                do {
                    iccid = try String.parseJSON(v)
                } catch JSONDecodeError.ValueTranslationFailed {
                    throw JSONDecodeError.TypeMismatch(key: "iccid", type: "String")
                }
            }
        } else {
            throw JSONDecodeError.MissingKey(key: "iccid")
        }
        
        let regulation: Bool
        if let v: AnyObject = data["regulation"] {
            if v is NSNull {
                throw JSONDecodeError.NonNullablle(key: "regulation")
            } else {
                do {
                    regulation = try Bool.parseJSON(v)
                } catch JSONDecodeError.ValueTranslationFailed {
                    throw JSONDecodeError.TypeMismatch(key: "regulation", type: "Bool")
                }
            }
        } else {
            throw JSONDecodeError.MissingKey(key: "regulation")
        }
        
        let sms: Bool
        if let v: AnyObject = data["sms"] {
            if v is NSNull {
                throw JSONDecodeError.NonNullablle(key: "sms")
            } else {
                do {
                    sms = try Bool.parseJSON(v)
                } catch JSONDecodeError.ValueTranslationFailed {
                    throw JSONDecodeError.TypeMismatch(key: "sms", type: "Bool")
                }
            }
        } else {
            throw JSONDecodeError.MissingKey(key: "sms")
        }
        
        let voice: Bool
        if let v: AnyObject = data["voice"] {
            if v is NSNull {
                throw JSONDecodeError.NonNullablle(key: "voice")
            } else {
                do {
                    voice = try Bool.parseJSON(v)
                } catch JSONDecodeError.ValueTranslationFailed {
                    throw JSONDecodeError.TypeMismatch(key: "voice", type: "Bool")
                }
            }
        } else {
            throw JSONDecodeError.MissingKey(key: "voice")
        }
        
        let couponUse: Bool
        if let v: AnyObject = data["couponUse"] {
            if v is NSNull {
                throw JSONDecodeError.NonNullablle(key: "couponUse")
            } else {
                do {
                    couponUse = try Bool.parseJSON(v)
                } catch JSONDecodeError.ValueTranslationFailed {
                    throw JSONDecodeError.TypeMismatch(key: "couponUse", type: "Bool")
                }
            }
        } else {
            throw JSONDecodeError.MissingKey(key: "couponUse")
        }
        
        let coupon: [MIOCoupon]
        if let v: AnyObject = data["coupon"] {
            if v is NSNull {
                throw JSONDecodeError.NonNullablle(key: "coupon")
            } else {
                do {
                    coupon = try MIOCoupon.parseJSONArray(v)
                } catch JSONDecodeError.NonNullablle {
                    throw JSONDecodeError.NonNullablle(key: "coupon")
                } catch JSONDecodeError.ValueTranslationFailed {
                    throw JSONDecodeError.TypeMismatch(key: "coupon", type: "MIOCoupon")
                }
            }
        } else {
            throw JSONDecodeError.MissingKey(key: "coupon")
        }
        
        return MIOCouponHdoInfo(hdoServiceCode: hdoServiceCode, number: number, iccid: iccid, regulation: regulation, sms: sms, voice: voice, couponUse: couponUse, coupon: coupon)
    }

    public func toJSON() -> [String: AnyObject] {
        return [
            "hdoServiceCode": hdoServiceCode.toJSON(),
            "number": number.toJSON(),
            "iccid": iccid.toJSON(),
            "regulation": regulation.toJSON(),
            "sms": sms.toJSON(),
            "voice": voice.toJSON(),
            "couponUse": couponUse.toJSON(),
            "coupon": coupon.map { $0.toJSON() },
        ]
    }

    public var description: String {
        return "MIOCouponHdoInfo(hdoServiceCode=\(hdoServiceCode), number=\(number), iccid=\(iccid), regulation=\(regulation), sms=\(sms), voice=\(voice), couponUse=\(couponUse), coupon=\(coupon), packetLog=\(packetLog))"
    }
}

public class MIOCoupon: JSONDecodable, JSONEncodable, CustomStringConvertible {
    public let volume: UInt
    public let expire: String?
    public let type: String

    public init(volume: UInt, expire: String? = nil, type: String) {
        self.volume = volume
        self.expire = expire
        self.type = type
    }

    public class func parseJSON(data: AnyObject) throws -> MIOCoupon {
        let volume: UInt
        if let v: AnyObject = data["volume"] {
            if v is NSNull {
                throw JSONDecodeError.NonNullablle(key: "volume")
            } else {
                do {
                    volume = try UInt.parseJSON(v)
                } catch JSONDecodeError.ValueTranslationFailed {
                    throw JSONDecodeError.TypeMismatch(key: "volume", type: "UInt")
                }
            }
        } else {
            throw JSONDecodeError.MissingKey(key: "volume")
        }
        
        let expire: String?
        if let v: AnyObject = data["expire"] {
            if v is NSNull {
                expire = nil
            } else {
                do {
                    expire = try String.parseJSON(v)
                } catch JSONDecodeError.ValueTranslationFailed {
                    throw JSONDecodeError.TypeMismatch(key: "expire", type: "String")
                }
            }
        } else {
            expire = nil
        }
        
        let type: String
        if let v: AnyObject = data["type"] {
            if v is NSNull {
                throw JSONDecodeError.NonNullablle(key: "type")
            } else {
                do {
                    type = try String.parseJSON(v)
                } catch JSONDecodeError.ValueTranslationFailed {
                    throw JSONDecodeError.TypeMismatch(key: "type", type: "String")
                }
            }
        } else {
            throw JSONDecodeError.MissingKey(key: "type")
        }
        
        return MIOCoupon(volume: volume, expire: expire, type: type)
    }

    public func toJSON() -> [String: AnyObject] {
        return [
            "volume": volume.toJSON(),
            "expire": expire.map { $0.toJSON() } ?? NSNull(),
            "type": type.toJSON(),
        ]
    }

    public var description: String {
        return "MIOCoupon(volume=\(volume), expire=\(expire), type=\(type))"
    }
}

public class MIOPacketLogInfo: JSONDecodable, JSONEncodable, CustomStringConvertible {
    public let hddServiceCode: String
    public let plan: MIOPlan
    public let hdoInfo: [MIOPacketHdoInfo]

    public init(hddServiceCode: String, plan: MIOPlan, hdoInfo: [MIOPacketHdoInfo]) {
        self.hddServiceCode = hddServiceCode
        self.plan = plan
        self.hdoInfo = hdoInfo
    }

    public class func parseJSON(data: AnyObject) throws -> MIOPacketLogInfo {
        let hddServiceCode: String
        if let v: AnyObject = data["hddServiceCode"] {
            if v is NSNull {
                throw JSONDecodeError.NonNullablle(key: "hddServiceCode")
            } else {
                do {
                    hddServiceCode = try String.parseJSON(v)
                } catch JSONDecodeError.ValueTranslationFailed {
                    throw JSONDecodeError.TypeMismatch(key: "hddServiceCode", type: "String")
                }
            }
        } else {
            throw JSONDecodeError.MissingKey(key: "hddServiceCode")
        }
        
        let plan: MIOPlan
        if let v: AnyObject = data["plan"] {
            if v is NSNull {
                throw JSONDecodeError.NonNullablle(key: "plan")
            } else {
                do {
                    plan = try MIOPlan.parseJSON(v)
                } catch JSONDecodeError.ValueTranslationFailed {
                    throw JSONDecodeError.TypeMismatch(key: "plan", type: "MIOPlan")
                }
            }
        } else {
            throw JSONDecodeError.MissingKey(key: "plan")
        }
        
        let hdoInfo: [MIOPacketHdoInfo]
        if let v: AnyObject = data["hdoInfo"] {
            if v is NSNull {
                throw JSONDecodeError.NonNullablle(key: "hdoInfo")
            } else {
                do {
                    hdoInfo = try MIOPacketHdoInfo.parseJSONArray(v)
                } catch JSONDecodeError.NonNullablle {
                    throw JSONDecodeError.NonNullablle(key: "hdoInfo")
                } catch JSONDecodeError.ValueTranslationFailed {
                    throw JSONDecodeError.TypeMismatch(key: "hdoInfo", type: "MIOPacketHdoInfo")
                }
            }
        } else {
            throw JSONDecodeError.MissingKey(key: "hdoInfo")
        }
        
        return MIOPacketLogInfo(hddServiceCode: hddServiceCode, plan: plan, hdoInfo: hdoInfo)
    }

    public func toJSON() -> [String: AnyObject] {
        return [
            "hddServiceCode": hddServiceCode.toJSON(),
            "plan": plan.toJSON(),
            "hdoInfo": hdoInfo.map { $0.toJSON() },
        ]
    }

    public var description: String {
        return "MIOPacketLogInfo(hddServiceCode=\(hddServiceCode), plan=\(plan), hdoInfo=\(hdoInfo))"
    }
}

public class MIOPacketHdoInfo: JSONDecodable, JSONEncodable, CustomStringConvertible {
    public let hdoServiceCode: String
    public let packetLog: [MIOPacketLog]

    public init(hdoServiceCode: String, packetLog: [MIOPacketLog]) {
        self.hdoServiceCode = hdoServiceCode
        self.packetLog = packetLog
    }

    public class func parseJSON(data: AnyObject) throws -> MIOPacketHdoInfo {
        let hdoServiceCode: String
        if let v: AnyObject = data["hdoServiceCode"] {
            if v is NSNull {
                throw JSONDecodeError.NonNullablle(key: "hdoServiceCode")
            } else {
                do {
                    hdoServiceCode = try String.parseJSON(v)
                } catch JSONDecodeError.ValueTranslationFailed {
                    throw JSONDecodeError.TypeMismatch(key: "hdoServiceCode", type: "String")
                }
            }
        } else {
            throw JSONDecodeError.MissingKey(key: "hdoServiceCode")
        }
        
        let packetLog: [MIOPacketLog]
        if let v: AnyObject = data["packetLog"] {
            if v is NSNull {
                throw JSONDecodeError.NonNullablle(key: "packetLog")
            } else {
                do {
                    packetLog = try MIOPacketLog.parseJSONArray(v)
                } catch JSONDecodeError.NonNullablle {
                    throw JSONDecodeError.NonNullablle(key: "packetLog")
                } catch JSONDecodeError.ValueTranslationFailed {
                    throw JSONDecodeError.TypeMismatch(key: "packetLog", type: "MIOPacketLog")
                }
            }
        } else {
            throw JSONDecodeError.MissingKey(key: "packetLog")
        }
        
        return MIOPacketHdoInfo(hdoServiceCode: hdoServiceCode, packetLog: packetLog)
    }

    public func toJSON() -> [String: AnyObject] {
        return [
            "hdoServiceCode": hdoServiceCode.toJSON(),
            "packetLog": packetLog.map { $0.toJSON() },
        ]
    }

    public var description: String {
        return "MIOPacketHdoInfo(hdoServiceCode=\(hdoServiceCode), packetLog=\(packetLog))"
    }
}

public class MIOPacketLog: JSONDecodable, JSONEncodable, CustomStringConvertible {
    public let date: NSDate
    public let withCoupon: UInt
    public let withoutCoupon: UInt

    public init(date: NSDate, withCoupon: UInt, withoutCoupon: UInt) {
        self.date = date
        self.withCoupon = withCoupon
        self.withoutCoupon = withoutCoupon
    }

    public class func parseJSON(data: AnyObject) throws -> MIOPacketLog {
        let date: NSDate
        if let v: AnyObject = data["date"] {
            if v is NSNull {
                throw JSONDecodeError.NonNullablle(key: "date")
            } else {
                do {
                    date = try NSDate.parseJSON(v)
                } catch JSONDecodeError.ValueTranslationFailed {
                    throw JSONDecodeError.TypeMismatch(key: "date", type: "NSDate")
                }
            }
        } else {
            throw JSONDecodeError.MissingKey(key: "date")
        }
        
        let withCoupon: UInt
        if let v: AnyObject = data["withCoupon"] {
            if v is NSNull {
                throw JSONDecodeError.NonNullablle(key: "withCoupon")
            } else {
                do {
                    withCoupon = try UInt.parseJSON(v)
                } catch JSONDecodeError.ValueTranslationFailed {
                    throw JSONDecodeError.TypeMismatch(key: "withCoupon", type: "UInt")
                }
            }
        } else {
            throw JSONDecodeError.MissingKey(key: "withCoupon")
        }
        
        let withoutCoupon: UInt
        if let v: AnyObject = data["withoutCoupon"] {
            if v is NSNull {
                throw JSONDecodeError.NonNullablle(key: "withoutCoupon")
            } else {
                do {
                    withoutCoupon = try UInt.parseJSON(v)
                } catch JSONDecodeError.ValueTranslationFailed {
                    throw JSONDecodeError.TypeMismatch(key: "withoutCoupon", type: "UInt")
                }
            }
        } else {
            throw JSONDecodeError.MissingKey(key: "withoutCoupon")
        }
        
        return MIOPacketLog(date: date, withCoupon: withCoupon, withoutCoupon: withoutCoupon)
    }

    public func toJSON() -> [String: AnyObject] {
        return [
            "date": date.toJSON(),
            "withCoupon": withCoupon.toJSON(),
            "withoutCoupon": withoutCoupon.toJSON(),
        ]
    }

    public var description: String {
        return "MIOPacketLog(date=\(date), withCoupon=\(withCoupon), withoutCoupon=\(withoutCoupon))"
    }
}


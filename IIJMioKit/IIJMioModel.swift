// This file was auto-generated by Swift-IDL.

public enum MIOPlan: String {
    case FamilyShare = "Family Share"
    case MinimumStart = "Minimum Start"
    case LightStart = "Light Start"

    public static func parseJSON(data: AnyObject) -> (decoded: MIOPlan?, error: String?) {
        if let v = data as? String {
            return (MIOPlan(rawValue: v), nil)
        }
        return (nil, "Type transformation failed in MIOPlan")
    }
    public func toJSON() -> String {
        return self.rawValue
    }
}

public class MIOCouponResponse : JSONDecodable, JSONEncodable, Printable {
    public let returnCode: String
    public let couponInfo: [MIOCouponInfo]

    public init(returnCode: String, couponInfo: [MIOCouponInfo]) {
        self.returnCode = returnCode
        self.couponInfo = couponInfo
    }

    public class func parseJSON(data: [String: AnyObject]) -> (decoded: MIOCouponResponse?, error: String?) {
        let returnCode: String
        if let v: AnyObject = data["returnCode"] {
            if let _ = v as? NSNull {
                return (nil, "Null not allowed in 'returnCode'")
            } else {
                let (casted, err) = String.parseJSON(v)
                if let c = casted {
                    returnCode = c
                } else {
                    return (nil, err ?? "Type transformation failed in 'returnCode'")
                }
            }
        } else {
            return (nil, "Keyword not found: 'returnCode'")
        }
        
        let couponInfo: [MIOCouponInfo]
        if let v: AnyObject = data["couponInfo"] {
            if let _ = v as? NSNull {
                return (nil, "Null not allowed in 'couponInfo'")
            } else if let a = v as? [AnyObject] {
                var r: [MIOCouponInfo] = []
                r.reserveCapacity(count(a))
                for elem in a {
                    if let e = elem as? [String : AnyObject] {
                        let (casted, err) = MIOCouponInfo.parseJSON(e)
                        if let c = casted {
                            r.append(c)
                        } else {
                            return (nil, err ?? "Type transformation failed in 'couponInfo'")
                        }
                    } else {
                        return (nil, "Object expected in 'couponInfo'")
                    }
                }
                couponInfo = r
            } else {
                return (nil, "Type transformation failed in 'couponInfo'")
            }
        } else {
            return (nil, "Keyword not found: 'couponInfo'")
        }
        
        return (MIOCouponResponse(returnCode: returnCode, couponInfo: couponInfo), nil)
    }

    public func toJSON() -> [String: AnyObject] {
        return [
            "returnCode": returnCode.toJSON(),
            "couponInfo": map(couponInfo) { $0.toJSON() },
        ]
    }

    public var description: String {
        return "MIOCouponResponse(returnCode=\(returnCode), couponInfo=\(couponInfo))"
    }
}

public class MIOPacketResponse : JSONDecodable, JSONEncodable, Printable {
    public let returnCode: String
    public let packetLogInfo: [MIOPacketLogInfo]

    public init(returnCode: String, packetLogInfo: [MIOPacketLogInfo]) {
        self.returnCode = returnCode
        self.packetLogInfo = packetLogInfo
    }

    public class func parseJSON(data: [String: AnyObject]) -> (decoded: MIOPacketResponse?, error: String?) {
        let returnCode: String
        if let v: AnyObject = data["returnCode"] {
            if let _ = v as? NSNull {
                return (nil, "Null not allowed in 'returnCode'")
            } else {
                let (casted, err) = String.parseJSON(v)
                if let c = casted {
                    returnCode = c
                } else {
                    return (nil, err ?? "Type transformation failed in 'returnCode'")
                }
            }
        } else {
            return (nil, "Keyword not found: 'returnCode'")
        }
        
        let packetLogInfo: [MIOPacketLogInfo]
        if let v: AnyObject = data["packetLogInfo"] {
            if let _ = v as? NSNull {
                return (nil, "Null not allowed in 'packetLogInfo'")
            } else if let a = v as? [AnyObject] {
                var r: [MIOPacketLogInfo] = []
                r.reserveCapacity(count(a))
                for elem in a {
                    if let e = elem as? [String : AnyObject] {
                        let (casted, err) = MIOPacketLogInfo.parseJSON(e)
                        if let c = casted {
                            r.append(c)
                        } else {
                            return (nil, err ?? "Type transformation failed in 'packetLogInfo'")
                        }
                    } else {
                        return (nil, "Object expected in 'packetLogInfo'")
                    }
                }
                packetLogInfo = r
            } else {
                return (nil, "Type transformation failed in 'packetLogInfo'")
            }
        } else {
            return (nil, "Keyword not found: 'packetLogInfo'")
        }
        
        return (MIOPacketResponse(returnCode: returnCode, packetLogInfo: packetLogInfo), nil)
    }

    public func toJSON() -> [String: AnyObject] {
        return [
            "returnCode": returnCode.toJSON(),
            "packetLogInfo": map(packetLogInfo) { $0.toJSON() },
        ]
    }

    public var description: String {
        return "MIOPacketResponse(returnCode=\(returnCode), packetLogInfo=\(packetLogInfo))"
    }
}

public class MIOChangeCouponResponse : JSONDecodable, JSONEncodable, Printable {
    public let returnCode: String

    public init(returnCode: String) {
        self.returnCode = returnCode
    }

    public class func parseJSON(data: [String: AnyObject]) -> (decoded: MIOChangeCouponResponse?, error: String?) {
        let returnCode: String
        if let v: AnyObject = data["returnCode"] {
            if let _ = v as? NSNull {
                return (nil, "Null not allowed in 'returnCode'")
            } else {
                let (casted, err) = String.parseJSON(v)
                if let c = casted {
                    returnCode = c
                } else {
                    return (nil, err ?? "Type transformation failed in 'returnCode'")
                }
            }
        } else {
            return (nil, "Keyword not found: 'returnCode'")
        }
        
        return (MIOChangeCouponResponse(returnCode: returnCode), nil)
    }

    public func toJSON() -> [String: AnyObject] {
        return [
            "returnCode": returnCode.toJSON(),
        ]
    }

    public var description: String {
        return "MIOChangeCouponResponse(returnCode=\(returnCode))"
    }
}

public class MIOCouponInfo : JSONDecodable, JSONEncodable, Printable {
    public let hddServiceCode: String
    public let plan: MIOPlan
    public let hdoInfo: [MIOCouponHdoInfo]
    public let coupon: [MIOCoupon]

    public init(hddServiceCode: String, plan: MIOPlan, hdoInfo: [MIOCouponHdoInfo], coupon: [MIOCoupon]) {
        self.hddServiceCode = hddServiceCode
        self.plan = plan
        self.hdoInfo = hdoInfo
        self.coupon = coupon
    }

    public class func parseJSON(data: [String: AnyObject]) -> (decoded: MIOCouponInfo?, error: String?) {
        let hddServiceCode: String
        if let v: AnyObject = data["hddServiceCode"] {
            if let _ = v as? NSNull {
                return (nil, "Null not allowed in 'hddServiceCode'")
            } else {
                let (casted, err) = String.parseJSON(v)
                if let c = casted {
                    hddServiceCode = c
                } else {
                    return (nil, err ?? "Type transformation failed in 'hddServiceCode'")
                }
            }
        } else {
            return (nil, "Keyword not found: 'hddServiceCode'")
        }
        
        let plan: MIOPlan
        if let v: AnyObject = data["plan"] {
            if let _ = v as? NSNull {
                return (nil, "Null not allowed in 'plan'")
            } else {
                let (casted, err) = MIOPlan.parseJSON(v)
                if let c = casted {
                    plan = c
                } else {
                    return (nil, err ?? "Type transformation failed in 'plan'")
                }
            }
        } else {
            return (nil, "Keyword not found: 'plan'")
        }
        
        let hdoInfo: [MIOCouponHdoInfo]
        if let v: AnyObject = data["hdoInfo"] {
            if let _ = v as? NSNull {
                return (nil, "Null not allowed in 'hdoInfo'")
            } else if let a = v as? [AnyObject] {
                var r: [MIOCouponHdoInfo] = []
                r.reserveCapacity(count(a))
                for elem in a {
                    if let e = elem as? [String : AnyObject] {
                        let (casted, err) = MIOCouponHdoInfo.parseJSON(e)
                        if let c = casted {
                            r.append(c)
                        } else {
                            return (nil, err ?? "Type transformation failed in 'hdoInfo'")
                        }
                    } else {
                        return (nil, "Object expected in 'hdoInfo'")
                    }
                }
                hdoInfo = r
            } else {
                return (nil, "Type transformation failed in 'hdoInfo'")
            }
        } else {
            return (nil, "Keyword not found: 'hdoInfo'")
        }
        
        let coupon: [MIOCoupon]
        if let v: AnyObject = data["coupon"] {
            if let _ = v as? NSNull {
                return (nil, "Null not allowed in 'coupon'")
            } else if let a = v as? [AnyObject] {
                var r: [MIOCoupon] = []
                r.reserveCapacity(count(a))
                for elem in a {
                    if let e = elem as? [String : AnyObject] {
                        let (casted, err) = MIOCoupon.parseJSON(e)
                        if let c = casted {
                            r.append(c)
                        } else {
                            return (nil, err ?? "Type transformation failed in 'coupon'")
                        }
                    } else {
                        return (nil, "Object expected in 'coupon'")
                    }
                }
                coupon = r
            } else {
                return (nil, "Type transformation failed in 'coupon'")
            }
        } else {
            return (nil, "Keyword not found: 'coupon'")
        }
        
        return (MIOCouponInfo(hddServiceCode: hddServiceCode, plan: plan, hdoInfo: hdoInfo, coupon: coupon), nil)
    }

    public func toJSON() -> [String: AnyObject] {
        return [
            "hddServiceCode": hddServiceCode.toJSON(),
            "plan": plan.toJSON(),
            "hdoInfo": map(hdoInfo) { $0.toJSON() },
            "coupon": map(coupon) { $0.toJSON() },
        ]
    }

    public var description: String {
        return "MIOCouponInfo(hddServiceCode=\(hddServiceCode), plan=\(plan), hdoInfo=\(hdoInfo), coupon=\(coupon))"
    }
}

public class MIOCouponHdoInfo : JSONDecodable, JSONEncodable, Printable {
    public let hdoServiceCode: String
    public let number: String
    public let iccid: String
    public let regulation: Bool
    public let sms: Bool
    public let voice: Bool
    public var couponUse: Bool
    public let coupon: [MIOCoupon]
    public var packetLog: [MIOPacketLog]

    public init(hdoServiceCode: String, number: String, iccid: String, regulation: Bool, sms: Bool, voice: Bool, couponUse: Bool, coupon: [MIOCoupon], packetLog: [MIOPacketLog] = []) {
        self.hdoServiceCode = hdoServiceCode
        self.number = number
        self.iccid = iccid
        self.regulation = regulation
        self.sms = sms
        self.voice = voice
        self.couponUse = couponUse
        self.coupon = coupon
        self.packetLog = packetLog
    }

    public class func parseJSON(data: [String: AnyObject]) -> (decoded: MIOCouponHdoInfo?, error: String?) {
        let hdoServiceCode: String
        if let v: AnyObject = data["hdoServiceCode"] {
            if let _ = v as? NSNull {
                return (nil, "Null not allowed in 'hdoServiceCode'")
            } else {
                let (casted, err) = String.parseJSON(v)
                if let c = casted {
                    hdoServiceCode = c
                } else {
                    return (nil, err ?? "Type transformation failed in 'hdoServiceCode'")
                }
            }
        } else {
            return (nil, "Keyword not found: 'hdoServiceCode'")
        }
        
        let number: String
        if let v: AnyObject = data["number"] {
            if let _ = v as? NSNull {
                return (nil, "Null not allowed in 'number'")
            } else {
                let (casted, err) = String.parseJSON(v)
                if let c = casted {
                    number = c
                } else {
                    return (nil, err ?? "Type transformation failed in 'number'")
                }
            }
        } else {
            return (nil, "Keyword not found: 'number'")
        }
        
        let iccid: String
        if let v: AnyObject = data["iccid"] {
            if let _ = v as? NSNull {
                return (nil, "Null not allowed in 'iccid'")
            } else {
                let (casted, err) = String.parseJSON(v)
                if let c = casted {
                    iccid = c
                } else {
                    return (nil, err ?? "Type transformation failed in 'iccid'")
                }
            }
        } else {
            return (nil, "Keyword not found: 'iccid'")
        }
        
        let regulation: Bool
        if let v: AnyObject = data["regulation"] {
            if let _ = v as? NSNull {
                return (nil, "Null not allowed in 'regulation'")
            } else {
                let (casted, err) = Bool.parseJSON(v)
                if let c = casted {
                    regulation = c
                } else {
                    return (nil, err ?? "Type transformation failed in 'regulation'")
                }
            }
        } else {
            return (nil, "Keyword not found: 'regulation'")
        }
        
        let sms: Bool
        if let v: AnyObject = data["sms"] {
            if let _ = v as? NSNull {
                return (nil, "Null not allowed in 'sms'")
            } else {
                let (casted, err) = Bool.parseJSON(v)
                if let c = casted {
                    sms = c
                } else {
                    return (nil, err ?? "Type transformation failed in 'sms'")
                }
            }
        } else {
            return (nil, "Keyword not found: 'sms'")
        }
        
        let voice: Bool
        if let v: AnyObject = data["voice"] {
            if let _ = v as? NSNull {
                return (nil, "Null not allowed in 'voice'")
            } else {
                let (casted, err) = Bool.parseJSON(v)
                if let c = casted {
                    voice = c
                } else {
                    return (nil, err ?? "Type transformation failed in 'voice'")
                }
            }
        } else {
            return (nil, "Keyword not found: 'voice'")
        }
        
        let couponUse: Bool
        if let v: AnyObject = data["couponUse"] {
            if let _ = v as? NSNull {
                return (nil, "Null not allowed in 'couponUse'")
            } else {
                let (casted, err) = Bool.parseJSON(v)
                if let c = casted {
                    couponUse = c
                } else {
                    return (nil, err ?? "Type transformation failed in 'couponUse'")
                }
            }
        } else {
            return (nil, "Keyword not found: 'couponUse'")
        }
        
        let coupon: [MIOCoupon]
        if let v: AnyObject = data["coupon"] {
            if let _ = v as? NSNull {
                return (nil, "Null not allowed in 'coupon'")
            } else if let a = v as? [AnyObject] {
                var r: [MIOCoupon] = []
                r.reserveCapacity(count(a))
                for elem in a {
                    if let e = elem as? [String : AnyObject] {
                        let (casted, err) = MIOCoupon.parseJSON(e)
                        if let c = casted {
                            r.append(c)
                        } else {
                            return (nil, err ?? "Type transformation failed in 'coupon'")
                        }
                    } else {
                        return (nil, "Object expected in 'coupon'")
                    }
                }
                coupon = r
            } else {
                return (nil, "Type transformation failed in 'coupon'")
            }
        } else {
            return (nil, "Keyword not found: 'coupon'")
        }
        
        return (MIOCouponHdoInfo(hdoServiceCode: hdoServiceCode, number: number, iccid: iccid, regulation: regulation, sms: sms, voice: voice, couponUse: couponUse, coupon: coupon), nil)
    }

    public func toJSON() -> [String: AnyObject] {
        return [
            "hdoServiceCode": hdoServiceCode.toJSON(),
            "number": number.toJSON(),
            "iccid": iccid.toJSON(),
            "regulation": regulation.toJSON(),
            "sms": sms.toJSON(),
            "voice": voice.toJSON(),
            "couponUse": couponUse.toJSON(),
            "coupon": map(coupon) { $0.toJSON() },
        ]
    }

    public var description: String {
        return "MIOCouponHdoInfo(hdoServiceCode=\(hdoServiceCode), number=\(number), iccid=\(iccid), regulation=\(regulation), sms=\(sms), voice=\(voice), couponUse=\(couponUse), coupon=\(coupon), packetLog=\(packetLog))"
    }
}

public class MIOCoupon : JSONDecodable, JSONEncodable, Printable {
    public let volume: UInt
    public let expire: String?
    public let type: String

    public init(volume: UInt, expire: String? = nil, type: String) {
        self.volume = volume
        self.expire = expire
        self.type = type
    }

    public class func parseJSON(data: [String: AnyObject]) -> (decoded: MIOCoupon?, error: String?) {
        let volume: UInt
        if let v: AnyObject = data["volume"] {
            if let _ = v as? NSNull {
                return (nil, "Null not allowed in 'volume'")
            } else {
                let (casted, err) = UInt.parseJSON(v)
                if let c = casted {
                    volume = c
                } else {
                    return (nil, err ?? "Type transformation failed in 'volume'")
                }
            }
        } else {
            return (nil, "Keyword not found: 'volume'")
        }
        
        let expire: String?
        if let v: AnyObject = data["expire"] {
            if let _ = v as? NSNull {
                expire = nil
            } else {
                let (casted, err) = String.parseJSON(v)
                if let c = casted {
                    expire = c
                } else {
                    return (nil, err ?? "Type transformation failed in 'expire'")
                }
            }
        } else {
            expire = nil
        }
        
        let type: String
        if let v: AnyObject = data["type"] {
            if let _ = v as? NSNull {
                return (nil, "Null not allowed in 'type'")
            } else {
                let (casted, err) = String.parseJSON(v)
                if let c = casted {
                    type = c
                } else {
                    return (nil, err ?? "Type transformation failed in 'type'")
                }
            }
        } else {
            return (nil, "Keyword not found: 'type'")
        }
        
        return (MIOCoupon(volume: volume, expire: expire, type: type), nil)
    }

    public func toJSON() -> [String: AnyObject] {
        return [
            "volume": volume.toJSON(),
            "expire": expire.map { $0.toJSON() } ?? NSNull(),
            "type": type.toJSON(),
        ]
    }

    public var description: String {
        return "MIOCoupon(volume=\(volume), expire=\(expire), type=\(type))"
    }
}

public class MIOPacketLogInfo : JSONDecodable, JSONEncodable, Printable {
    public let hddServiceCode: String
    public let plan: MIOPlan
    public let hdoInfo: [MIOPacketHdoInfo]

    public init(hddServiceCode: String, plan: MIOPlan, hdoInfo: [MIOPacketHdoInfo]) {
        self.hddServiceCode = hddServiceCode
        self.plan = plan
        self.hdoInfo = hdoInfo
    }

    public class func parseJSON(data: [String: AnyObject]) -> (decoded: MIOPacketLogInfo?, error: String?) {
        let hddServiceCode: String
        if let v: AnyObject = data["hddServiceCode"] {
            if let _ = v as? NSNull {
                return (nil, "Null not allowed in 'hddServiceCode'")
            } else {
                let (casted, err) = String.parseJSON(v)
                if let c = casted {
                    hddServiceCode = c
                } else {
                    return (nil, err ?? "Type transformation failed in 'hddServiceCode'")
                }
            }
        } else {
            return (nil, "Keyword not found: 'hddServiceCode'")
        }
        
        let plan: MIOPlan
        if let v: AnyObject = data["plan"] {
            if let _ = v as? NSNull {
                return (nil, "Null not allowed in 'plan'")
            } else {
                let (casted, err) = MIOPlan.parseJSON(v)
                if let c = casted {
                    plan = c
                } else {
                    return (nil, err ?? "Type transformation failed in 'plan'")
                }
            }
        } else {
            return (nil, "Keyword not found: 'plan'")
        }
        
        let hdoInfo: [MIOPacketHdoInfo]
        if let v: AnyObject = data["hdoInfo"] {
            if let _ = v as? NSNull {
                return (nil, "Null not allowed in 'hdoInfo'")
            } else if let a = v as? [AnyObject] {
                var r: [MIOPacketHdoInfo] = []
                r.reserveCapacity(count(a))
                for elem in a {
                    if let e = elem as? [String : AnyObject] {
                        let (casted, err) = MIOPacketHdoInfo.parseJSON(e)
                        if let c = casted {
                            r.append(c)
                        } else {
                            return (nil, err ?? "Type transformation failed in 'hdoInfo'")
                        }
                    } else {
                        return (nil, "Object expected in 'hdoInfo'")
                    }
                }
                hdoInfo = r
            } else {
                return (nil, "Type transformation failed in 'hdoInfo'")
            }
        } else {
            return (nil, "Keyword not found: 'hdoInfo'")
        }
        
        return (MIOPacketLogInfo(hddServiceCode: hddServiceCode, plan: plan, hdoInfo: hdoInfo), nil)
    }

    public func toJSON() -> [String: AnyObject] {
        return [
            "hddServiceCode": hddServiceCode.toJSON(),
            "plan": plan.toJSON(),
            "hdoInfo": map(hdoInfo) { $0.toJSON() },
        ]
    }

    public var description: String {
        return "MIOPacketLogInfo(hddServiceCode=\(hddServiceCode), plan=\(plan), hdoInfo=\(hdoInfo))"
    }
}

public class MIOPacketHdoInfo : JSONDecodable, JSONEncodable, Printable {
    public let hdoServiceCode: String
    public let packetLog: [MIOPacketLog]

    public init(hdoServiceCode: String, packetLog: [MIOPacketLog]) {
        self.hdoServiceCode = hdoServiceCode
        self.packetLog = packetLog
    }

    public class func parseJSON(data: [String: AnyObject]) -> (decoded: MIOPacketHdoInfo?, error: String?) {
        let hdoServiceCode: String
        if let v: AnyObject = data["hdoServiceCode"] {
            if let _ = v as? NSNull {
                return (nil, "Null not allowed in 'hdoServiceCode'")
            } else {
                let (casted, err) = String.parseJSON(v)
                if let c = casted {
                    hdoServiceCode = c
                } else {
                    return (nil, err ?? "Type transformation failed in 'hdoServiceCode'")
                }
            }
        } else {
            return (nil, "Keyword not found: 'hdoServiceCode'")
        }
        
        let packetLog: [MIOPacketLog]
        if let v: AnyObject = data["packetLog"] {
            if let _ = v as? NSNull {
                return (nil, "Null not allowed in 'packetLog'")
            } else if let a = v as? [AnyObject] {
                var r: [MIOPacketLog] = []
                r.reserveCapacity(count(a))
                for elem in a {
                    if let e = elem as? [String : AnyObject] {
                        let (casted, err) = MIOPacketLog.parseJSON(e)
                        if let c = casted {
                            r.append(c)
                        } else {
                            return (nil, err ?? "Type transformation failed in 'packetLog'")
                        }
                    } else {
                        return (nil, "Object expected in 'packetLog'")
                    }
                }
                packetLog = r
            } else {
                return (nil, "Type transformation failed in 'packetLog'")
            }
        } else {
            return (nil, "Keyword not found: 'packetLog'")
        }
        
        return (MIOPacketHdoInfo(hdoServiceCode: hdoServiceCode, packetLog: packetLog), nil)
    }

    public func toJSON() -> [String: AnyObject] {
        return [
            "hdoServiceCode": hdoServiceCode.toJSON(),
            "packetLog": map(packetLog) { $0.toJSON() },
        ]
    }

    public var description: String {
        return "MIOPacketHdoInfo(hdoServiceCode=\(hdoServiceCode), packetLog=\(packetLog))"
    }
}

public class MIOPacketLog : JSONDecodable, JSONEncodable, Printable {
    public let date: NSDate
    public let withCoupon: UInt
    public let withoutCoupon: UInt

    public init(date: NSDate, withCoupon: UInt, withoutCoupon: UInt) {
        self.date = date
        self.withCoupon = withCoupon
        self.withoutCoupon = withoutCoupon
    }

    public class func parseJSON(data: [String: AnyObject]) -> (decoded: MIOPacketLog?, error: String?) {
        let date: NSDate
        if let v: AnyObject = data["date"] {
            if let _ = v as? NSNull {
                return (nil, "Null not allowed in 'date'")
            } else {
                let (casted, err) = NSDate.parseJSON(v)
                if let c = casted {
                    date = c
                } else {
                    return (nil, err ?? "Type transformation failed in 'date'")
                }
            }
        } else {
            return (nil, "Keyword not found: 'date'")
        }
        
        let withCoupon: UInt
        if let v: AnyObject = data["withCoupon"] {
            if let _ = v as? NSNull {
                return (nil, "Null not allowed in 'withCoupon'")
            } else {
                let (casted, err) = UInt.parseJSON(v)
                if let c = casted {
                    withCoupon = c
                } else {
                    return (nil, err ?? "Type transformation failed in 'withCoupon'")
                }
            }
        } else {
            return (nil, "Keyword not found: 'withCoupon'")
        }
        
        let withoutCoupon: UInt
        if let v: AnyObject = data["withoutCoupon"] {
            if let _ = v as? NSNull {
                return (nil, "Null not allowed in 'withoutCoupon'")
            } else {
                let (casted, err) = UInt.parseJSON(v)
                if let c = casted {
                    withoutCoupon = c
                } else {
                    return (nil, err ?? "Type transformation failed in 'withoutCoupon'")
                }
            }
        } else {
            return (nil, "Keyword not found: 'withoutCoupon'")
        }
        
        return (MIOPacketLog(date: date, withCoupon: withCoupon, withoutCoupon: withoutCoupon), nil)
    }

    public func toJSON() -> [String: AnyObject] {
        return [
            "date": date.toJSON(),
            "withCoupon": withCoupon.toJSON(),
            "withoutCoupon": withoutCoupon.toJSON(),
        ]
    }

    public var description: String {
        return "MIOPacketLog(date=\(date), withCoupon=\(withCoupon), withoutCoupon=\(withoutCoupon))"
    }
}

